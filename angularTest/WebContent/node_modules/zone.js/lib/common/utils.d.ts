export declare const zoneSymbol: (name: string) => string;
export declare function bindArguments(args: any[], source: string): any[];
export declare function patchPrototype(prototype: any, fnNames: any): void;
export declare const isWebWorker: boolean;
export declare const isNode: boolean;
export declare const isBrowser: boolean;
export declare const isMix: boolean;
export declare function patchProperty(obj: any, prop: any): void;
export declare function patchOnProperties(obj: any, properties: string[]): void;
export interface NestedEventListener {
    listener?: EventListenerOrEventListenerObject;
}
export declare type NestedEventListenerOrEventListenerObject = NestedEventListener | EventListener | EventListenerObject;
export interface ListenerTaskMeta extends TaskData {
    useCapturing: boolean;
    eventName: string;
    handler: NestedEventListenerOrEventListenerObject;
    target: any;
    name: string;
    invokeAddFunc: (addFnSymbol: any, delegate: Task | NestedEventListenerOrEventListenerObject) => any;
    invokeRemoveFunc: (removeFnSymbol: any, delegate: Task | NestedEventListenerOrEventListenerObject) => any;
}
export declare function makeZoneAwareAddListener(addFnName: string, removeFnName: string, useCapturingParam?: boolean, allowDuplicates?: boolean, isPrepend?: boolean, metaCreator?: (self: any, args: any[]) => ListenerTaskMeta): (self: any, args: any[]) => any;
export declare function makeZoneAwareRemoveListener(fnName: string, useCapturingParam?: boolean, metaCreator?: (self: any, args: any[]) => ListenerTaskMeta): (self: any, args: any[]) => void;
export declare function makeZoneAwareRemoveAllListeners(fnName: string, useCapturingParam?: boolean): (self: any, args: any[]) => void;
export declare function makeZoneAwareListeners(fnName: string): (self: any, args: any[]) => any;
export declare function patchEventTargetMethods(obj: any, addFnName?: string, removeFnName?: string, metaCreator?: (self: any, args: any[]) => ListenerTaskMeta): boolean;
export declare function patchClass(className: any): void;
export declare function createNamedFn(name: string, delegate: (self: any, args: any[]) => any): Function;
export declare function patchMethod(target: any, name: string, patchFn: (delegate: Function, delegateName: string, name: string) => (self: any, args: any[]) => any): Function;
export interface MacroTaskMeta extends TaskData {
    name: string;
    target: any;
    callbackIndex: number;
    args: any[];
}
export declare function patchMacroTask(obj: any, funcName: string, metaCreator: (self: any, args: any[]) => MacroTaskMeta): void;
export interface MicroTaskMeta extends TaskData {
    name: string;
    target: any;
    callbackIndex: number;
    args: any[];
}
export declare function patchMicroTask(obj: any, funcName: string, metaCreator: (self: any, args: any[]) => MicroTaskMeta): void;
export declare function findEventTask(target: any, evtName: string): Task[];
